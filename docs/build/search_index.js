var documenterSearchIndex = {"docs":
[{"location":"adding_search_benchmarks.html#Adding-Search-Benchmarks","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"","category":"section"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"We had our first meeting, and we discussed what would be the flow of the entire internshiop and also discussed how to go about the first deliverable as per the proposal which is Adding Search Benchmarks.  ","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"We discussed what should be the language of choice for writing scripts for benchmarking, we had two possible candidates, one was Julia (for obvious reasons, since the whole repo is in Julia) and the other one was JavaScript since the search functionality is implemented in JavaScript so it would be easier to interact with the search functionality.  ","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"We talked about it and thought of JavaScript as a better choice but now I think of it, I belive the barebone architecture for benchmarks should be in Julia only so that in future if anybody want to add more benchmarks or new tests they can do it easily as I am expecting most of the people coming in the Documenter repo are coming from Julia background and as far as talking to the JavaScript based search functionality we can see how to talk it through Julin in coming days.","category":"page"},{"location":"adding_search_benchmarks.html#Creating-query-structure","page":"Adding Search Benchmarks","title":"Creating query structure","text":"","category":"section"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"First we'll create a new directory in test folder, I have named it search. Inside it I have created the first file named test_queries.jl","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"The file structure look like this :","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"test/\n├─search/\n│   └─test_queries.jl\n...","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"I started with creating a basic struct which stores the search query and what should be the expected docs in the following manner :","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"struct TestQuery\n    query::String\n    expected_docs::Vector{String}\nend","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"we can then compare it with the actual result and find out the different benchmarks.","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"Now we can create different groups of queries like basic queries or queries specific to Julia syntax and if anybody from the community want to test some queries specific to their usecase, they can do it easily. We can then use them all together using something like vcat which will concatenate all the arrays into one","category":"page"},{"location":"adding_search_benchmarks.html#Evaluation","page":"Adding Search Benchmarks","title":"Evaluation","text":"","category":"section"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"For now, I am using three metrics for calculating benchmarks namely :","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"Precision \nmeasures how many of the returned results are relevant.\nExample: if you returned 5 docs, out of which 3 are relevant, precision = 3/5 = 0.6.\nRecall \nmeasures how many of the true relevant documents were found in the result.\nExample: if there were 4 relevant docs and you returned 3 of them, recall = 3/4 = 0.75.\nF1 Score \nharmonic mean of precision and recall.\nthis balances precision and recall in a single number.\nF_1 = 2 times fractextprecision times textrecalltextprecision + textrecall","category":"page"},{"location":"adding_search_benchmarks.html#Helper-functions","page":"Adding Search Benchmarks","title":"Helper functions","text":"","category":"section"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"Now let's create a function that evaluate all these metrics for a single query","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"It'll look something like this :","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"function evaluate_query(search_function, query::TestQuery)\n    results = search_function(query.query)\n\n    precision = calculate_precision(results, query.expected_docs)\n    recall = calculate_recall(results, query.expected_docs)\n    f1 = calculate_f1(precision, recall)\n\n    return Dict(\n        \"query\" => query.query,\n        \"precision\" => precision,\n        \"recall\" => recall,\n        \"f1\" => f1,\n        \"expected\" => query.expected_docs,\n        \"actual\" => results\n    )\nend","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"This will return a dictionary that have all the relevant results. We still have to create the search function that will search the query in our actual search implementation.","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"This looks good, now we need to create a function that evaluate all metrics for a suite of queries, which would essentially be calling the evaluate_query function for array of queries, and then calculating the mean of all results for each metric and return a dictionary similar to evaluate_query function","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"It look something like this : ","category":"page"},{"location":"adding_search_benchmarks.html","page":"Adding Search Benchmarks","title":"Adding Search Benchmarks","text":"function evaluate_all(search_function, queries)\n    results = [evaluate_query(search_function, q) for q in queries]\n\n    avg_precision = mean([r[\"precision\"] for r in results])\n    avg_recall = mean([r[\"recall\"] for r in results])\n    avg_f1 = mean([r[\"f1\"] for r in results])\n\n    return Dict(\n        \"individual_results\" => results,\n        \"average_precision\" => avg_precision,\n        \"average_recall\" => avg_recall,\n        \"average_f1_score\" => avg_f1\n    )\nend","category":"page"},{"location":"index.html#Improving-Search-functionality-for-Documenter.jl","page":"Home","title":"Improving Search functionality for Documenter.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This site is a collection of notes, progress reports for the 2025 Google Summer of Code (GSoC) project by @Rahban1, mentored by @mortenpi and @Hetarth02.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"I thought it would be a good idea to document my journey using Documenter itself, also I was inspired by my mentor Morten who did the same :)","category":"page"}]
}
